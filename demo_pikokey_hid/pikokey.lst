
pikokey.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0b60006f          	j	b6 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	0000012a          	.word	0x0000012a
   c:	00000128          	.word	0x00000128
	...
  30:	00000520          	.word	0x00000520
  34:	00000000          	.word	0x00000000
  38:	00000128          	.word	0x00000128
  3c:	00000000          	.word	0x00000000
  40:	00000128          	.word	0x00000128
  44:	00000128          	.word	0x00000128
  48:	00000128          	.word	0x00000128
  4c:	00000128          	.word	0x00000128
  50:	0000073c          	.word	0x0000073c
  54:	00000128          	.word	0x00000128
  58:	00000128          	.word	0x00000128
  5c:	00000128          	.word	0x00000128
  60:	00000128          	.word	0x00000128
  64:	00000128          	.word	0x00000128
  68:	00000128          	.word	0x00000128
  6c:	00000128          	.word	0x00000128
  70:	00000128          	.word	0x00000128
  74:	00000128          	.word	0x00000128
  78:	00000128          	.word	0x00000128
  7c:	00000128          	.word	0x00000128
  80:	00000128          	.word	0x00000128
  84:	00000128          	.word	0x00000128
  88:	00000128          	.word	0x00000128
  8c:	00000128          	.word	0x00000128
  90:	00000128          	.word	0x00000128
  94:	00000128          	.word	0x00000128
  98:	00000128          	.word	0x00000128
  9c:	0000                	.2byte	0x0
	...

Disassembly of section .text:

000000a0 <DelaySysTick>:
  a0:	e000f7b7          	lui	a5,0xe000f
  a4:	479c                	lw	a5,8(a5)
  a6:	e000f737          	lui	a4,0xe000f
  aa:	953e                	add	a0,a0,a5
  ac:	471c                	lw	a5,8(a4)
  ae:	8f89                	sub	a5,a5,a0
  b0:	fe07cee3          	bltz	a5,ac <DelaySysTick+0xc>
  b4:	8082                	ret

000000b6 <handle_reset>:
  b6:	20000197          	auipc	gp,0x20000
  ba:	74a18193          	add	gp,gp,1866 # 20000800 <__global_pointer$>
  be:	00018113          	mv	sp,gp
  c2:	08000513          	li	a0,128
  c6:	30051073          	csrw	mstatus,a0
  ca:	468d                	li	a3,3
  cc:	00000517          	auipc	a0,0x0
  d0:	f3450513          	add	a0,a0,-204 # 0 <InterruptVector>
  d4:	8d55                	or	a0,a0,a3
  d6:	30551073          	csrw	mtvec,a0
  da:	81818513          	add	a0,gp,-2024 # 20000018 <qp>
  de:	88818593          	add	a1,gp,-1912 # 20000088 <_ebss>
  e2:	4601                	li	a2,0
  e4:	00b55663          	bge	a0,a1,f0 <handle_reset+0x3a>
  e8:	c110                	sw	a2,0(a0)
  ea:	0511                	add	a0,a0,4
  ec:	feb54ee3          	blt	a0,a1,e8 <handle_reset+0x32>
  f0:	00001517          	auipc	a0,0x1
  f4:	b5c50513          	add	a0,a0,-1188 # c4c <_data_lma>
  f8:	20000597          	auipc	a1,0x20000
  fc:	f0858593          	add	a1,a1,-248 # 20000000 <cols_pin>
 100:	81818613          	add	a2,gp,-2024 # 20000018 <qp>
 104:	00c58863          	beq	a1,a2,114 <handle_reset+0x5e>
 108:	4114                	lw	a3,0(a0)
 10a:	c194                	sw	a3,0(a1)
 10c:	0511                	add	a0,a0,4
 10e:	0591                	add	a1,a1,4
 110:	fec59ae3          	bne	a1,a2,104 <handle_reset+0x4e>
 114:	e000f7b7          	lui	a5,0xe000f
 118:	4715                	li	a4,5
 11a:	c398                	sw	a4,0(a5)
 11c:	18000793          	li	a5,384
 120:	34179073          	csrw	mepc,a5
 124:	30200073          	mret

00000128 <ADC1_2_IRQHandler>:
 128:	a001                	j	128 <ADC1_2_IRQHandler>

0000012a <NMI_Handler>:
 12a:	40021737          	lui	a4,0x40021
 12e:	471c                	lw	a5,8(a4)
 130:	008006b7          	lui	a3,0x800
 134:	8fd5                	or	a5,a5,a3
 136:	c71c                	sw	a5,8(a4)

00000138 <SystemInit>:
 138:	400227b7          	lui	a5,0x40022
 13c:	4705                	li	a4,1
 13e:	c398                	sw	a4,0(a5)
 140:	400217b7          	lui	a5,0x40021
 144:	01080737          	lui	a4,0x1080
 148:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
 14c:	08170713          	add	a4,a4,129 # 1080081 <rv003usb.c.4b30943f+0x107d4e4>
 150:	c398                	sw	a4,0(a5)
 152:	009f0737          	lui	a4,0x9f0
 156:	c798                	sw	a4,8(a5)
 158:	020006b7          	lui	a3,0x2000
 15c:	40021737          	lui	a4,0x40021
 160:	431c                	lw	a5,0(a4)
 162:	8ff5                	and	a5,a5,a3
 164:	dff5                	beqz	a5,160 <SystemInit+0x28>
 166:	435c                	lw	a5,4(a4)
 168:	400216b7          	lui	a3,0x40021
 16c:	9bf1                	and	a5,a5,-4
 16e:	0027e793          	or	a5,a5,2
 172:	c35c                	sw	a5,4(a4)
 174:	4721                	li	a4,8
 176:	42dc                	lw	a5,4(a3)
 178:	8bb1                	and	a5,a5,12
 17a:	fee79ee3          	bne	a5,a4,176 <SystemInit+0x3e>
 17e:	8082                	ret

00000180 <main>:
  HID_KEY_E, 
  HID_KEY_F, 
};

int main()
{
 180:	fc410113          	add	sp,sp,-60
 184:	dc06                	sw	ra,56(sp)
 186:	da22                	sw	s0,52(sp)
 188:	d826                	sw	s1,48(sp)
  SystemInit();
  Delay_Ms(1); // Ensures USB re-enumeration after bootloader or reset; Spec demand >2.5µs ( TDDIS )
 18a:	6431                	lui	s0,0xc
{
 18c:	ca02                	sw	zero,20(sp)
 18e:	cc02                	sw	zero,24(sp)
 190:	ce02                	sw	zero,28(sp)
 192:	d002                	sw	zero,32(sp)
  SystemInit();
 194:	3755                	jal	138 <SystemInit>
  Delay_Ms(1); // Ensures USB re-enumeration after bootloader or reset; Spec demand >2.5µs ( TDDIS )
 196:	b8040513          	add	a0,s0,-1152 # bb80 <rv003usb.c.4b30943f+0x8fe3>
 19a:	3719                	jal	a0 <DelaySysTick>
 * Start up the SysTick IRQ
 */
void systick_init(void)
{
	/* disable default SysTick behavior */
	SysTick->CTLR = 0;
 19c:	e000f7b7          	lui	a5,0xe000f
 1a0:	0007a023          	sw	zero,0(a5) # e000f000 <__global_pointer$+0xc000e800>
}

// Enable Interrupt (by interrupt number)
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 1a4:	e000e737          	lui	a4,0xe000e
 1a8:	6685                	lui	a3,0x1
 1aa:	10d72023          	sw	a3,256(a4) # e000e100 <__global_pointer$+0xc000d900>
	
	/* enable the SysTick IRQ */
	NVIC_EnableIRQ(SysTicK_IRQn);
	
	/* Set the tick interval to 1ms for normal op */
	SysTick->CMP = (FUNCONF_SYSTEM_CORE_CLOCK/1000)-1;
 1ae:	b7f40413          	add	s0,s0,-1153
 1b2:	cb80                	sw	s0,16(a5)
	
	/* Start at zero */
	SysTick->CNT = 0;
 1b4:	0007a423          	sw	zero,8(a5)
	SysTick_Count = 0;
 1b8:	8001ae23          	sw	zero,-2020(gp) # 2000001c <SysTick_Count>
	
	/* Enable SysTick counter, IRQ, HCLK/1 */
	SysTick->CTLR = SYSTICK_CTLR_STE | SYSTICK_CTLR_STIE |
 1bc:	471d                	li	a4,7
 1be:	c398                	sw	a4,0(a5)
  systick_init();

  GPIO_port_enable(GPIO_port_A);
 1c0:	400217b7          	lui	a5,0x40021
 1c4:	4f98                	lw	a4,24(a5)
  GPIO_port_enable(GPIO_port_C);
  GPIO_port_enable(GPIO_port_D);
  // funGpioInitAll();
  for (int i=0;i<nrows;i++){
    GPIO_pinMode(
 1c6:	400115b7          	lui	a1,0x40011
  for (int i=0;i<nrows;i++){
 1ca:	4601                	li	a2,0
  GPIO_port_enable(GPIO_port_A);
 1cc:	00476713          	or	a4,a4,4
 1d0:	cf98                	sw	a4,24(a5)
  GPIO_port_enable(GPIO_port_C);
 1d2:	4f98                	lw	a4,24(a5)
    GPIO_pinMode(
 1d4:	80058593          	add	a1,a1,-2048 # 40010800 <__global_pointer$+0x20010000>
 1d8:	433d                	li	t1,15
  GPIO_port_enable(GPIO_port_C);
 1da:	01076713          	or	a4,a4,16
 1de:	cf98                	sw	a4,24(a5)
  GPIO_port_enable(GPIO_port_D);
 1e0:	4f98                	lw	a4,24(a5)
    GPIO_pinMode(
 1e2:	4521                	li	a0,8
  GPIO_port_enable(GPIO_port_D);
 1e4:	02076713          	or	a4,a4,32
 1e8:	cf98                	sw	a4,24(a5)
    GPIO_pinMode(
 1ea:	81418793          	add	a5,gp,-2028 # 20000014 <rows_port>
 1ee:	c03e                	sw	a5,0(sp)
 1f0:	81018793          	add	a5,gp,-2032 # 20000010 <rows_pin>
 1f4:	c23e                	sw	a5,4(sp)
 1f6:	4782                	lw	a5,0(sp)
 1f8:	97b2                	add	a5,a5,a2
 1fa:	0007c703          	lbu	a4,0(a5) # 40021000 <__global_pointer$+0x20020800>
 1fe:	4792                	lw	a5,4(sp)
 200:	0712                	sll	a4,a4,0x4
 202:	97b2                	add	a5,a5,a2
 204:	0007c783          	lbu	a5,0(a5)
  for (int i=0;i<nrows;i++){
 208:	0605                	add	a2,a2,1
    GPIO_pinMode(
 20a:	8f5d                	or	a4,a4,a5
 20c:	40475793          	sra	a5,a4,0x4
 210:	07aa                	sll	a5,a5,0xa
 212:	97ae                	add	a5,a5,a1
 214:	8b3d                	and	a4,a4,15
 216:	0007a383          	lw	t2,0(a5)
 21a:	00271693          	sll	a3,a4,0x2
 21e:	00d312b3          	sll	t0,t1,a3
 222:	fff2c293          	not	t0,t0
 226:	0072f2b3          	and	t0,t0,t2
 22a:	0057a023          	sw	t0,0(a5)
 22e:	0007a283          	lw	t0,0(a5)
 232:	00d516b3          	sll	a3,a0,a3
 236:	0056e6b3          	or	a3,a3,t0
 23a:	c394                	sw	a3,0(a5)
 23c:	4685                	li	a3,1
 23e:	00e69733          	sll	a4,a3,a4
 242:	cb98                	sw	a4,16(a5)
  for (int i=0;i<nrows;i++){
 244:	4791                	li	a5,4
 246:	faf618e3          	bne	a2,a5,1f6 <main+0x76>
        GPIO_pinMode_I_pullUp, GPIO_Speed_In);
    // funPinMode(rows[i], GPIO_CFGLR_IN_PUPD);
    // funDigitalWrite(rows[i], FUN_HIGH);
  }
  for (int i=0;i<ncols;i++){
    GPIO_pinMode(
 24a:	200007b7          	lui	a5,0x20000
 24e:	00878793          	add	a5,a5,8 # 20000008 <cols_port>
 252:	c43e                	sw	a5,8(sp)
 254:	200007b7          	lui	a5,0x20000
 258:	00078793          	mv	a5,a5
 25c:	40011637          	lui	a2,0x40011
  for (int i=0;i<ncols;i++){
 260:	4581                	li	a1,0
    GPIO_pinMode(
 262:	c63e                	sw	a5,12(sp)
 264:	80060293          	add	t0,a2,-2048 # 40010800 <__global_pointer$+0x20010000>
 268:	433d                	li	t1,15
 26a:	4521                	li	a0,8
 26c:	47a2                	lw	a5,8(sp)
 26e:	97ae                	add	a5,a5,a1
 270:	0007c703          	lbu	a4,0(a5) # 20000000 <cols_pin>
 274:	47b2                	lw	a5,12(sp)
 276:	0712                	sll	a4,a4,0x4
 278:	97ae                	add	a5,a5,a1
 27a:	0007c783          	lbu	a5,0(a5)
  for (int i=0;i<ncols;i++){
 27e:	0585                	add	a1,a1,1
    GPIO_pinMode(
 280:	8f5d                	or	a4,a4,a5
 282:	40475793          	sra	a5,a4,0x4
 286:	07aa                	sll	a5,a5,0xa
 288:	9796                	add	a5,a5,t0
 28a:	8b3d                	and	a4,a4,15
 28c:	0007a083          	lw	ra,0(a5)
 290:	00271693          	sll	a3,a4,0x2
 294:	00d313b3          	sll	t2,t1,a3
 298:	fff3c393          	not	t2,t2
 29c:	0013f3b3          	and	t2,t2,ra
 2a0:	0077a023          	sw	t2,0(a5)
 2a4:	0007a383          	lw	t2,0(a5)
 2a8:	00d516b3          	sll	a3,a0,a3
 2ac:	0076e6b3          	or	a3,a3,t2
 2b0:	c394                	sw	a3,0(a5)
 2b2:	4685                	li	a3,1
 2b4:	00e69733          	sll	a4,a3,a4
 2b8:	cb98                	sw	a4,16(a5)
  for (int i=0;i<ncols;i++){
 2ba:	4799                	li	a5,6
 2bc:	faf598e3          	bne	a1,a5,26c <main+0xec>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
 2c0:	200007b7          	lui	a5,0x20000
 2c4:	0207ac23          	sw	zero,56(a5) # 20000038 <rv003usb_internal_data+0x18>

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 2c8:	40021737          	lui	a4,0x40021
 2cc:	4f1c                	lw	a5,24(a4)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 2ce:	40060613          	add	a2,a2,1024
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 2d2:	0217e793          	or	a5,a5,33
 2d6:	cf1c                	sw	a5,24(a4)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 2d8:	421c                	lw	a5,0(a2)
 2da:	fff01737          	lui	a4,0xfff01
 2de:	177d                	add	a4,a4,-1 # fff00fff <__global_pointer$+0xdff007ff>
 2e0:	8ff9                	and	a5,a5,a4
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
 2e2:	00088737          	lui	a4,0x88
 2e6:	8fd9                	or	a5,a5,a4
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
 2e8:	c21c                	sw	a5,0(a2)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
 2ea:	30000713          	li	a4,768
 2ee:	400107b7          	lui	a5,0x40010
 2f2:	c798                	sw	a4,8(a5)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
 2f4:	40078793          	add	a5,a5,1024 # 40010400 <__global_pointer$+0x2000fc00>
 2f8:	4741                	li	a4,16
 2fa:	c398                	sw	a4,0(a5)
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
 2fc:	c7d8                	sw	a4,12(a5)
 2fe:	e000e7b7          	lui	a5,0xe000e
 302:	00100737          	lui	a4,0x100
 306:	10e7a023          	sw	a4,256(a5) # e000e100 <__global_pointer$+0xc000d900>
  }

  usb_setup();

  while(1){
    Delay_Ms(100);
 30a:	00494537          	lui	a0,0x494
 30e:	e0050513          	add	a0,a0,-512 # 493e00 <rv003usb.c.4b30943f+0x491263>
 312:	3379                	jal	a0 <DelaySysTick>
    for (int i=0;i<nrows;i++){
      GPIO_pinMode(
 314:	400117b7          	lui	a5,0x40011
 318:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
    for (int i=0;i<nrows;i++){
 31c:	4701                	li	a4,0
      GPIO_pinMode(
 31e:	d23e                	sw	a5,36(sp)
 320:	4782                	lw	a5,0(sp)
 322:	46bd                	li	a3,15
 324:	d63a                	sw	a4,44(sp)
 326:	97ba                	add	a5,a5,a4
 328:	0007c483          	lbu	s1,0(a5)
 32c:	4792                	lw	a5,4(sp)
      GPIO_digitalWrite(
          GPIOv_from_PORT_PIN(rows_port[i], rows_pin[i]),
          low);
      // funPinMode(rows[i], GPIO_CFGLR_OUT_10Mhz_PP);
      // funDigitalWrite(rows[i], FUN_LOW);
      Delay_Us(1);
 32e:	03000513          	li	a0,48
      GPIO_pinMode(
 332:	0492                	sll	s1,s1,0x4
 334:	97ba                	add	a5,a5,a4
 336:	0007c783          	lbu	a5,0(a5)
 33a:	8cdd                	or	s1,s1,a5
 33c:	5792                	lw	a5,36(sp)
 33e:	4044d413          	sra	s0,s1,0x4
 342:	042a                	sll	s0,s0,0xa
 344:	943e                	add	s0,s0,a5
 346:	88bd                	and	s1,s1,15
 348:	401c                	lw	a5,0(s0)
 34a:	00249593          	sll	a1,s1,0x2
 34e:	00b696b3          	sll	a3,a3,a1
 352:	fff6c713          	not	a4,a3
 356:	8ff9                	and	a5,a5,a4
 358:	c01c                	sw	a5,0(s0)
 35a:	4010                	lw	a2,0(s0)
 35c:	4785                	li	a5,1
 35e:	00b796b3          	sll	a3,a5,a1
 362:	8ed1                	or	a3,a3,a2
 364:	c014                	sw	a3,0(s0)
      GPIO_digitalWrite(
 366:	01048693          	add	a3,s1,16
 36a:	00d797b3          	sll	a5,a5,a3
 36e:	c81c                	sw	a5,16(s0)
      GPIO_pinMode(
 370:	c83a                	sw	a4,16(sp)
 372:	d42e                	sw	a1,40(sp)
      Delay_Us(1);
 374:	3335                	jal	a0 <DelaySysTick>
        if (!GPIO_digitalRead(
              GPIOv_from_PORT_PIN(
                cols_port[j], cols_pin[j]))) {
        // if (funDigitalRead(cols[j]) == FUN_LOW) {
          queue[0] = HID_KEY_0;
          queue[1] = i2k[i];
 376:	5732                	lw	a4,44(sp)
 378:	6785                	lui	a5,0x1
      for (int j=0;j<ncols;j++){
 37a:	55a2                	lw	a1,40(sp)
          queue[1] = i2k[i];
 37c:	c3c78313          	add	t1,a5,-964 # c3c <i2k>
      Delay_Us(1);
 380:	4501                	li	a0,0
      for (int j=0;j<ncols;j++){
 382:	4681                	li	a3,0
          queue[1] = i2k[i];
 384:	00e303b3          	add	t2,t1,a4
        if (!GPIO_digitalRead(
 388:	47a2                	lw	a5,8(sp)
 38a:	4632                	lw	a2,12(sp)
 38c:	5292                	lw	t0,36(sp)
 38e:	97b6                	add	a5,a5,a3
 390:	0007c783          	lbu	a5,0(a5)
 394:	9636                	add	a2,a2,a3
 396:	00064603          	lbu	a2,0(a2)
 39a:	0792                	sll	a5,a5,0x4
 39c:	8fd1                	or	a5,a5,a2
 39e:	4047d613          	sra	a2,a5,0x4
 3a2:	062a                	sll	a2,a2,0xa
 3a4:	9616                	add	a2,a2,t0
 3a6:	4610                	lw	a2,8(a2)
 3a8:	8bbd                	and	a5,a5,15
 3aa:	00f65633          	srl	a2,a2,a5
 3ae:	8a05                	and	a2,a2,1
 3b0:	ee01                	bnez	a2,3c8 <main+0x248>
          queue[1] = i2k[i];
 3b2:	0003c783          	lbu	a5,0(t2)
          queue[2] = i2k[j];
          queue[3] = HID_KEY_SPACE;
          queue[4] = 0;
          qp=0;
 3b6:	8001ac23          	sw	zero,-2024(gp) # 20000018 <qp>
 3ba:	4505                	li	a0,1
          queue[1] = i2k[i];
 3bc:	ce3e                	sw	a5,28(sp)
          queue[2] = i2k[j];
 3be:	006687b3          	add	a5,a3,t1
 3c2:	0007c783          	lbu	a5,0(a5)
 3c6:	d03e                	sw	a5,32(sp)
      for (int j=0;j<ncols;j++){
 3c8:	0685                	add	a3,a3,1 # 1001 <_data_lma+0x3b5>
 3ca:	4799                	li	a5,6
 3cc:	faf69ee3          	bne	a3,a5,388 <main+0x208>
 3d0:	c11d                	beqz	a0,3f6 <main+0x276>
 3d2:	87c18793          	add	a5,gp,-1924 # 2000007c <queue>
 3d6:	02700693          	li	a3,39
 3da:	00d78023          	sb	a3,0(a5)
 3de:	46f2                	lw	a3,28(sp)
 3e0:	00078223          	sb	zero,4(a5)
 3e4:	00d780a3          	sb	a3,1(a5)
 3e8:	5682                	lw	a3,32(sp)
 3ea:	00d78123          	sb	a3,2(a5)
 3ee:	02c00693          	li	a3,44
 3f2:	00d781a3          	sb	a3,3(a5)
        }
      }
      GPIO_pinMode(
 3f6:	401c                	lw	a5,0(s0)
 3f8:	46c2                	lw	a3,16(sp)
    for (int i=0;i<nrows;i++){
 3fa:	0705                	add	a4,a4,1 # 100001 <rv003usb.c.4b30943f+0xfd464>
      GPIO_pinMode(
 3fc:	8ff5                	and	a5,a5,a3
 3fe:	c01c                	sw	a5,0(s0)
 400:	4014                	lw	a3,0(s0)
 402:	47a1                	li	a5,8
 404:	00b797b3          	sll	a5,a5,a1
 408:	8fd5                	or	a5,a5,a3
 40a:	c01c                	sw	a5,0(s0)
 40c:	4785                	li	a5,1
 40e:	009797b3          	sll	a5,a5,s1
 412:	c81c                	sw	a5,16(s0)
    for (int i=0;i<nrows;i++){
 414:	4791                	li	a5,4
 416:	f0f715e3          	bne	a4,a5,320 <main+0x1a0>
          GPIO_pinMode_I_pullUp, GPIO_Speed_In);
      // funPinMode(rows[i], GPIO_CFGLR_IN_PUPD);
      // funDigitalWrite(rows[i], FUN_HIGH);
    }
    for (int i=0;i<ncols;i++){
      GPIO_pinMode(
 41a:	400117b7          	lui	a5,0x40011
 41e:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
    for (int i=0;i<ncols;i++){
 422:	4701                	li	a4,0
      GPIO_pinMode(
 424:	d23e                	sw	a5,36(sp)
 426:	47a2                	lw	a5,8(sp)
 428:	46bd                	li	a3,15
 42a:	d63a                	sw	a4,44(sp)
 42c:	97ba                	add	a5,a5,a4
 42e:	0007c483          	lbu	s1,0(a5)
 432:	47b2                	lw	a5,12(sp)
      GPIO_digitalWrite(
          GPIOv_from_PORT_PIN(cols_port[i], cols_pin[i]),
          low);
      // funPinMode(cols[i], GPIO_CFGLR_OUT_10Mhz_PP);
      // funDigitalWrite(cols[i], FUN_LOW);
      Delay_Us(1);
 434:	03000513          	li	a0,48
      GPIO_pinMode(
 438:	0492                	sll	s1,s1,0x4
 43a:	97ba                	add	a5,a5,a4
 43c:	0007c783          	lbu	a5,0(a5)
 440:	8cdd                	or	s1,s1,a5
 442:	5792                	lw	a5,36(sp)
 444:	4044d413          	sra	s0,s1,0x4
 448:	042a                	sll	s0,s0,0xa
 44a:	943e                	add	s0,s0,a5
 44c:	88bd                	and	s1,s1,15
 44e:	401c                	lw	a5,0(s0)
 450:	00249593          	sll	a1,s1,0x2
 454:	00b696b3          	sll	a3,a3,a1
 458:	fff6c713          	not	a4,a3
 45c:	8ff9                	and	a5,a5,a4
 45e:	c01c                	sw	a5,0(s0)
 460:	4010                	lw	a2,0(s0)
 462:	4785                	li	a5,1
 464:	00b796b3          	sll	a3,a5,a1
 468:	8ed1                	or	a3,a3,a2
 46a:	c014                	sw	a3,0(s0)
      GPIO_digitalWrite(
 46c:	01048693          	add	a3,s1,16
 470:	00d797b3          	sll	a5,a5,a3
 474:	c81c                	sw	a5,16(s0)
      GPIO_pinMode(
 476:	c83a                	sw	a4,16(sp)
 478:	d42e                	sw	a1,40(sp)
      Delay_Us(1);
 47a:	311d                	jal	a0 <DelaySysTick>
        if (!GPIO_digitalRead(
              GPIOv_from_PORT_PIN(
                rows_port[j], rows_pin[j]))) {
        // if (funDigitalRead(rows[j]) == FUN_LOW) {
          queue[0] = HID_KEY_1;
          queue[1] = i2k[i];
 47c:	5732                	lw	a4,44(sp)
 47e:	6785                	lui	a5,0x1
      for (int j=0;j<nrows;j++){
 480:	55a2                	lw	a1,40(sp)
          queue[1] = i2k[i];
 482:	c3c78313          	add	t1,a5,-964 # c3c <i2k>
      Delay_Us(1);
 486:	4501                	li	a0,0
      for (int j=0;j<nrows;j++){
 488:	4681                	li	a3,0
          queue[1] = i2k[i];
 48a:	00e303b3          	add	t2,t1,a4
        if (!GPIO_digitalRead(
 48e:	4782                	lw	a5,0(sp)
 490:	4612                	lw	a2,4(sp)
 492:	5292                	lw	t0,36(sp)
 494:	97b6                	add	a5,a5,a3
 496:	0007c783          	lbu	a5,0(a5)
 49a:	9636                	add	a2,a2,a3
 49c:	00064603          	lbu	a2,0(a2)
 4a0:	0792                	sll	a5,a5,0x4
 4a2:	8fd1                	or	a5,a5,a2
 4a4:	4047d613          	sra	a2,a5,0x4
 4a8:	062a                	sll	a2,a2,0xa
 4aa:	9616                	add	a2,a2,t0
 4ac:	4610                	lw	a2,8(a2)
 4ae:	8bbd                	and	a5,a5,15
 4b0:	00f65633          	srl	a2,a2,a5
 4b4:	8a05                	and	a2,a2,1
 4b6:	ee01                	bnez	a2,4ce <main+0x34e>
          queue[1] = i2k[i];
 4b8:	0003c783          	lbu	a5,0(t2)
          queue[2] = i2k[j];
          queue[3] = HID_KEY_SPACE;
          queue[4] = 0;
          qp=0;
 4bc:	8001ac23          	sw	zero,-2024(gp) # 20000018 <qp>
 4c0:	4505                	li	a0,1
          queue[1] = i2k[i];
 4c2:	cc3e                	sw	a5,24(sp)
          queue[2] = i2k[j];
 4c4:	006687b3          	add	a5,a3,t1
 4c8:	0007c783          	lbu	a5,0(a5)
 4cc:	ca3e                	sw	a5,20(sp)
      for (int j=0;j<nrows;j++){
 4ce:	0685                	add	a3,a3,1
 4d0:	4791                	li	a5,4
 4d2:	faf69ee3          	bne	a3,a5,48e <main+0x30e>
 4d6:	c115                	beqz	a0,4fa <main+0x37a>
 4d8:	87c18793          	add	a5,gp,-1924 # 2000007c <queue>
 4dc:	02c00693          	li	a3,44
 4e0:	00d781a3          	sb	a3,3(a5)
 4e4:	46d2                	lw	a3,20(sp)
 4e6:	00078223          	sb	zero,4(a5)
 4ea:	00d78123          	sb	a3,2(a5)
 4ee:	46e2                	lw	a3,24(sp)
 4f0:	00d780a3          	sb	a3,1(a5)
 4f4:	46f9                	li	a3,30
 4f6:	00d78023          	sb	a3,0(a5)
        }
      }
      GPIO_pinMode(
 4fa:	401c                	lw	a5,0(s0)
 4fc:	46c2                	lw	a3,16(sp)
    for (int i=0;i<ncols;i++){
 4fe:	0705                	add	a4,a4,1
      GPIO_pinMode(
 500:	8ff5                	and	a5,a5,a3
 502:	c01c                	sw	a5,0(s0)
 504:	4014                	lw	a3,0(s0)
 506:	47a1                	li	a5,8
 508:	00b797b3          	sll	a5,a5,a1
 50c:	8fd5                	or	a5,a5,a3
 50e:	c01c                	sw	a5,0(s0)
 510:	4785                	li	a5,1
 512:	009797b3          	sll	a5,a5,s1
 516:	c81c                	sw	a5,16(s0)
    for (int i=0;i<ncols;i++){
 518:	4799                	li	a5,6
 51a:	f0f716e3          	bne	a4,a5,426 <main+0x2a6>
 51e:	b3f5                	j	30a <main+0x18a>

00000520 <SysTick_Handler>:
 * SysTick ISR just counts ticks
 * note - the __attribute__((interrupt)) syntax is crucial!
 */
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
 520:	1151                	add	sp,sp,-12
 522:	c03e                	sw	a5,0(sp)
	// move the compare further ahead in time.
	// as a warning, if more than this length of time
	// passes before triggering, you may miss your
	// interrupt.
	SysTick->CMP += (FUNCONF_SYSTEM_CORE_CLOCK/1000);
 524:	e000f7b7          	lui	a5,0xe000f
{
 528:	c23a                	sw	a4,4(sp)
	SysTick->CMP += (FUNCONF_SYSTEM_CORE_CLOCK/1000);
 52a:	4b98                	lw	a4,16(a5)
{
 52c:	c436                	sw	a3,8(sp)
	SysTick->CMP += (FUNCONF_SYSTEM_CORE_CLOCK/1000);
 52e:	66b1                	lui	a3,0xc
 530:	b8068693          	add	a3,a3,-1152 # bb80 <rv003usb.c.4b30943f+0x8fe3>
 534:	9736                	add	a4,a4,a3
 536:	cb98                	sw	a4,16(a5)

	/* clear IRQ */
	SysTick->SR = 0;
 538:	0007a223          	sw	zero,4(a5) # e000f004 <__global_pointer$+0xc000e804>

	/* update counter */
	SysTick_Count++;
 53c:	81c1a783          	lw	a5,-2020(gp) # 2000001c <SysTick_Count>
}
 540:	46a2                	lw	a3,8(sp)
	SysTick_Count++;
 542:	0785                	add	a5,a5,1
 544:	80f1ae23          	sw	a5,-2020(gp) # 2000001c <SysTick_Count>
}
 548:	4712                	lw	a4,4(sp)
 54a:	4782                	lw	a5,0(sp)
 54c:	0131                	add	sp,sp,12
 54e:	30200073          	mret

00000552 <usb_pid_handle_in>:
	NVIC_EnableIRQ( EXTI7_0_IRQn );
}


void usb_pid_handle_in( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )
{
 552:	1111                	add	sp,sp,-28
 554:	ca22                	sw	s0,20(sp)
 556:	c826                	sw	s1,16(sp)
 558:	cc06                	sw	ra,24(sp)
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 55a:	00561793          	sll	a5,a2,0x5
{
 55e:	843a                	mv	s0,a4
	ist->current_endpoint = endp;
 560:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 562:	973e                	add	a4,a4,a5
 564:	5318                	lw	a4,32(a4)
{
 566:	84b2                	mv	s1,a2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 568:	04b00693          	li	a3,75
 56c:	e319                	bnez	a4,572 <usb_pid_handle_in+0x20>
 56e:	0c300693          	li	a3,195



#if RV003USB_USE_REBOOT_FEATURE_REPORT
	if( ist->reboot_armed == 2 )
 572:	4450                	lw	a2,12(s0)
 574:	4709                	li	a4,2
 576:	02e61f63          	bne	a2,a4,5b4 <usb_pid_handle_in+0x62>
	{
		usb_send_empty( sendtok );
 57a:	8536                	mv	a0,a3
 57c:	c23e                	sw	a5,4(sp)
 57e:	c036                	sw	a3,0(sp)
 580:	29a5                	jal	9f8 <usb_send_empty>

		// Initiate boot into bootloader
		FLASH->BOOT_MODEKEYR = FLASH_KEY1;
 582:	45670637          	lui	a2,0x45670
 586:	40022737          	lui	a4,0x40022
 58a:	12360613          	add	a2,a2,291 # 45670123 <__global_pointer$+0x2566f923>
 58e:	d710                	sw	a2,40(a4)
		FLASH->BOOT_MODEKEYR = FLASH_KEY2;
 590:	cdef9637          	lui	a2,0xcdef9
 594:	9ab60613          	add	a2,a2,-1621 # cdef89ab <__global_pointer$+0xadef81ab>
 598:	d710                	sw	a2,40(a4)
		FLASH->STATR = 1<<14; // 1<<14 is zero, so, boot bootloader code. Unset for user code.
 59a:	6611                	lui	a2,0x4
 59c:	c750                	sw	a2,12(a4)
		FLASH->CTLR = CR_LOCK_Set;
		PFIC->SCTLR = 1<<31;
 59e:	4792                	lw	a5,4(sp)
		FLASH->CTLR = CR_LOCK_Set;
 5a0:	08000613          	li	a2,128
		PFIC->SCTLR = 1<<31;
 5a4:	4682                	lw	a3,0(sp)
		FLASH->CTLR = CR_LOCK_Set;
 5a6:	cb10                	sw	a2,16(a4)
		PFIC->SCTLR = 1<<31;
 5a8:	e000f737          	lui	a4,0xe000f
 5ac:	80000637          	lui	a2,0x80000
 5b0:	d0c72823          	sw	a2,-752(a4) # e000ed10 <__global_pointer$+0xc000e510>
	}
#endif

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
 5b4:	97a2                	add	a5,a5,s0
 5b6:	579c                	lw	a5,40(a5)
 5b8:	8fc5                	or	a5,a5,s1
 5ba:	cfb9                	beqz	a5,618 <usb_pid_handle_in+0xc6>
  }
}

void usb_handle_user_in_request( struct usb_endpoint * e, uint8_t * scratchpad, int endp, uint32_t sendtok, struct rv003usb_internal * ist )
{
  if( endp == 1 )
 5bc:	4785                	li	a5,1
 5be:	06f49863          	bne	s1,a5,62e <usb_pid_handle_in+0xdc>
  {
    uint8_t key_report[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    if (qp%2 == 0) {
 5c2:	8181a783          	lw	a5,-2024(gp) # 20000018 <qp>
    uint8_t key_report[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
 5c6:	c402                	sw	zero,8(sp)
 5c8:	c602                	sw	zero,12(sp)
    if (qp%2 == 0) {
 5ca:	8b85                	and	a5,a5,1
 5cc:	87c18413          	add	s0,gp,-1924 # 2000007c <queue>
 5d0:	ef81                	bnez	a5,5e8 <usb_pid_handle_in+0x96>
      key_report[2] = queue[qp/2];
 5d2:	8181a703          	lw	a4,-2024(gp) # 20000018 <qp>
 5d6:	01f75793          	srl	a5,a4,0x1f
 5da:	97ba                	add	a5,a5,a4
 5dc:	8785                	sra	a5,a5,0x1
 5de:	97a2                	add	a5,a5,s0
 5e0:	0007c783          	lbu	a5,0(a5)
 5e4:	00f10523          	sb	a5,10(sp)
    }
    usb_send_data( key_report, 8, 0, sendtok );
 5e8:	4601                	li	a2,0
 5ea:	45a1                	li	a1,8
 5ec:	0028                	add	a0,sp,8
 5ee:	2921                	jal	a06 <usb_send_data>
    if (queue[qp/2] != 0) {
 5f0:	8181a703          	lw	a4,-2024(gp) # 20000018 <qp>
 5f4:	01f75793          	srl	a5,a4,0x1f
 5f8:	97ba                	add	a5,a5,a4
 5fa:	8785                	sra	a5,a5,0x1
 5fc:	943e                	add	s0,s0,a5
 5fe:	00044783          	lbu	a5,0(s0)
 602:	c791                	beqz	a5,60e <usb_pid_handle_in+0xbc>
      qp++;
 604:	8181a783          	lw	a5,-2024(gp) # 20000018 <qp>
 608:	0785                	add	a5,a5,1
 60a:	80f1ac23          	sw	a5,-2024(gp) # 20000018 <qp>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
 60e:	40e2                	lw	ra,24(sp)
 610:	4452                	lw	s0,20(sp)
 612:	44c2                	lw	s1,16(sp)
 614:	0171                	add	sp,sp,28
 616:	8082                	ret
	int offset = (e->count)<<3;
 618:	4c5c                	lw	a5,28(s0)
	tosend = (int)e->max_len - offset;
 61a:	544c                	lw	a1,44(s0)
	sendnow = tsend + offset;
 61c:	5c08                	lw	a0,56(s0)
	int offset = (e->count)<<3;
 61e:	078e                	sll	a5,a5,0x3
	tosend = (int)e->max_len - offset;
 620:	8d9d                	sub	a1,a1,a5
	sendnow = tsend + offset;
 622:	953e                	add	a0,a0,a5
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 624:	47a1                	li	a5,8
 626:	00b7ca63          	blt	a5,a1,63a <usb_pid_handle_in+0xe8>
	if( tosend <= 0 )
 62a:	00b04963          	bgtz	a1,63c <usb_pid_handle_in+0xea>
}
 62e:	4452                	lw	s0,20(sp)
 630:	40e2                	lw	ra,24(sp)
 632:	44c2                	lw	s1,16(sp)
		usb_send_empty( sendtok );
 634:	8536                	mv	a0,a3
}
 636:	0171                	add	sp,sp,28
		usb_send_empty( sendtok );
 638:	a6c1                	j	9f8 <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 63a:	45a1                	li	a1,8
}
 63c:	4452                	lw	s0,20(sp)
 63e:	40e2                	lw	ra,24(sp)
 640:	44c2                	lw	s1,16(sp)
		usb_send_data( sendnow, tosend, 0, sendtok );
 642:	4601                	li	a2,0
}
 644:	0171                	add	sp,sp,28
		usb_send_data( sendnow, tosend, 0, sendtok );
 646:	a6c1                	j	a06 <usb_send_data>

00000648 <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
 648:	00072303          	lw	t1,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
 64c:	00531793          	sll	a5,t1,0x5
 650:	97ba                	add	a5,a5,a4
 652:	53c8                	lw	a0,36(a5)
 654:	00c51963          	bne	a0,a2,666 <usb_pid_handle_data+0x1e>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
 658:	00153513          	seqz	a0,a0
 65c:	d3c8                	sw	a0,36(a5)


#if RV003USB_HANDLE_USER_DATA || RV003USB_USE_REBOOT_FEATURE_REPORT
	if( epno || ( !ist->setup_request && length > 3 )  )
 65e:	00030a63          	beqz	t1,672 <usb_pid_handle_data+0x2a>
	{
#if RV003USB_USE_REBOOT_FEATURE_REPORT
		if( ist->reboot_armed )
 662:	475c                	lw	a5,12(a4)
 664:	e7a1                	bnez	a5,6ac <usb_pid_handle_data+0x64>
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
 666:	0d200693          	li	a3,210
 66a:	4609                	li	a2,2
 66c:	4581                	li	a1,0
 66e:	4501                	li	a0,0
 670:	ae59                	j	a06 <usb_send_data>
	if( epno || ( !ist->setup_request && length > 3 )  )
 672:	471c                	lw	a5,8(a4)
 674:	ef9d                	bnez	a5,6b2 <usb_pid_handle_data+0x6a>
	length -= 3;
 676:	16f5                	add	a3,a3,-3
	if( epno || ( !ist->setup_request && length > 3 )  )
 678:	478d                	li	a5,3
 67a:	fed7f6e3          	bgeu	a5,a3,666 <usb_pid_handle_data+0x1e>
		if( ist->reboot_armed )
 67e:	475c                	lw	a5,12(a4)
 680:	d3fd                	beqz	a5,666 <usb_pid_handle_data+0x1e>
			if( epno == 0 && base[0] == 0xaa3412fd && (base[1] & 0x00ffffff) == 0x00ddccbb )
 682:	4194                	lw	a3,0(a1)
 684:	aa3417b7          	lui	a5,0xaa341
 688:	2fd78793          	add	a5,a5,765 # aa3412fd <__global_pointer$+0x8a340afd>
 68c:	02f69063          	bne	a3,a5,6ac <usb_pid_handle_data+0x64>
 690:	41dc                	lw	a5,4(a1)
 692:	00ddd6b7          	lui	a3,0xddd
 696:	cbb68693          	add	a3,a3,-837 # ddccbb <rv003usb.c.4b30943f+0xdda11e>
 69a:	07a2                	sll	a5,a5,0x8
 69c:	83a1                	srl	a5,a5,0x8
 69e:	00d79763          	bne	a5,a3,6ac <usb_pid_handle_data+0x64>
				e->count = 7;
 6a2:	479d                	li	a5,7
 6a4:	cf5c                	sw	a5,28(a4)
				ist->reboot_armed = 2;
 6a6:	4789                	li	a5,2
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 6a8:	c75c                	sw	a5,12(a4)
 6aa:	bf75                	j	666 <usb_pid_handle_data+0x1e>
				ist->reboot_armed = 0;
 6ac:	00072623          	sw	zero,12(a4)
 6b0:	bf5d                	j	666 <usb_pid_handle_data+0x1e>
		uint32_t wvi = s->lValueLSBIndexMSB;
 6b2:	0045d683          	lhu	a3,4(a1)
 6b6:	0025d783          	lhu	a5,2(a1)
		uint32_t wLength = s->wLength;
 6ba:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
 6be:	06c2                	sll	a3,a3,0x10
 6c0:	8edd                	or	a3,a3,a5
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 6c2:	0005d783          	lhu	a5,0(a1)
		e->count = 0;
 6c6:	00072e23          	sw	zero,28(a4)
		e->opaque = 0;
 6ca:	02072c23          	sw	zero,56(a4)
		e->custom = 0;
 6ce:	02072423          	sw	zero,40(a4)
		e->max_len = 0;
 6d2:	02072623          	sw	zero,44(a4)
		ist->setup_request = 0;
 6d6:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 6da:	8385                	srl	a5,a5,0x1
		if( reqShl == (0x0921>>1) )
 6dc:	49000613          	li	a2,1168
 6e0:	00c79863          	bne	a5,a2,6f0 <usb_pid_handle_data+0xa8>
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 6e4:	3fd00793          	li	a5,1021
 6e8:	f6f69fe3          	bne	a3,a5,666 <usb_pid_handle_data+0x1e>
 6ec:	4785                	li	a5,1
 6ee:	bf6d                	j	6a8 <usb_pid_handle_data+0x60>
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
 6f0:	34000613          	li	a2,832
 6f4:	02c79d63          	bne	a5,a2,72e <usb_pid_handle_data+0xe6>
 6f8:	6785                	lui	a5,0x1
 6fa:	be878793          	add	a5,a5,-1048 # be8 <descriptor_list>
 6fe:	05478593          	add	a1,a5,84
					e->max_len = (swLen < elLen)?swLen:elLen;
 702:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
 704:	4390                	lw	a2,0(a5)
 706:	02d61063          	bne	a2,a3,726 <usb_pid_handle_data+0xde>
					e->opaque = (uint8_t*)dl->addr;
 70a:	43d0                	lw	a2,4(a5)
 70c:	df10                	sw	a2,56(a4)
					uint16_t elLen = dl->length;
 70e:	0087c603          	lbu	a2,8(a5)
					e->max_len = (swLen < elLen)?swLen:elLen;
 712:	01061293          	sll	t0,a2,0x10
 716:	0102d293          	srl	t0,t0,0x10
 71a:	00557363          	bgeu	a0,t0,720 <usb_pid_handle_data+0xd8>
 71e:	861a                	mv	a2,t1
 720:	0642                	sll	a2,a2,0x10
 722:	8241                	srl	a2,a2,0x10
 724:	d750                	sw	a2,44(a4)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
 726:	07b1                	add	a5,a5,12
 728:	fcb79ee3          	bne	a5,a1,704 <usb_pid_handle_data+0xbc>
 72c:	bf2d                	j	666 <usb_pid_handle_data+0x1e>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
 72e:	28000613          	li	a2,640
 732:	f2c79ae3          	bne	a5,a2,666 <usb_pid_handle_data+0x1e>
			ist->my_address = wvi;
 736:	c354                	sw	a3,4(a4)
 738:	b73d                	j	666 <usb_pid_handle_data+0x1e>
	...

0000073c <EXTI7_0_IRQHandler>:

.section .text.vector_handler
.global EXTI7_0_IRQHandler
.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
 73c:	715d                	add	sp,sp,-80
	sw	a0, 0(sp)
 73e:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
 740:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
 742:	400117b7          	lui	a5,0x40011
 746:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
 74a:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
 74c:	8961                	and	a0,a0,24

	sw	a1, 4(sp)
 74e:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
 750:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
 752:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
 754:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
 756:	ce26                	sw	s1,28(sp)

	SAVE_DEBUG_MARKER( 48 );
 758:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
 75a:	40013237          	lui	tp,0x40013
 75e:	c5820213          	add	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
 762:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
 764:	89e1                	and	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
 766:	22050963          	beqz	a0,998 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 76a:	4788                	lw	a0,8(a5)
 76c:	8961                	and	a0,a0,24
 76e:	02b51b63          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 772:	4788                	lw	a0,8(a5)
 774:	8961                	and	a0,a0,24
 776:	02b51763          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 77a:	4788                	lw	a0,8(a5)
 77c:	8961                	and	a0,a0,24
 77e:	02b51363          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 782:	4788                	lw	a0,8(a5)
 784:	8961                	and	a0,a0,24
 786:	00b51f63          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 78a:	4788                	lw	a0,8(a5)
 78c:	8961                	and	a0,a0,24
 78e:	00b51b63          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 792:	4788                	lw	a0,8(a5)
 794:	8961                	and	a0,a0,24
 796:	00b51763          	bne	a0,a1,7a4 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 79a:	4788                	lw	a0,8(a5)
 79c:	8961                	and	a0,a0,24
 79e:	00b51363          	bne	a0,a1,7a4 <syncout>
	c.j syncout
 7a2:	a009                	j	7a4 <syncout>

000007a4 <syncout>:
syncout:
	sw	s0, 24(sp)
 7a4:	cc22                	sw	s0,24(sp)
	li a2, 0
 7a6:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
 7a8:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
 7aa:	d21a                	sw	t1,36(sp)

000007ac <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
 7ac:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 7b0:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 7b2:	8961                	and	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
 7b4:	18050163          	beqz	a0,936 <done_usb_message>
	c.xor a0, a1;
 7b8:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
 7ba:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
 7bc:	a009                	j	7be <preamble_loop+0x12>
	c.beqz a0, done_preamble
 7be:	c909                	beqz	a0,7d0 <done_preamble>
	j 1f; 1: // 4 cycles?
 7c0:	a009                	j	7c2 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
 7c2:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
 7c4:	8861                	and	s0,s0,24
	c.xor s0, a1
 7c6:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
 7c8:	e011                	bnez	s0,7cc <preamble_loop+0x20>
	c.j 1f; 1:
 7ca:	a009                	j	7cc <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
 7cc:	b7c5                	j	7ac <preamble_loop>
 7ce:	0001                	nop

000007d0 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
 7d0:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
 7d2:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
 7d4:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
 7d6:	4419                	li	s0,6

	c.nop; 
 7d8:	0001                	nop
 7da:	0001                	nop

000007dc <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
 7dc:	66c1                	lui	a3,0x10
 7de:	16fd                	add	a3,a3,-1 # ffff <rv003usb.c.4b30943f+0xd462>
	li a4, 0xa001
 7e0:	6729                	lui	a4,0xa
 7e2:	0705                	add	a4,a4,1 # a001 <rv003usb.c.4b30943f+0x7464>
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
 7e4:	03f10393          	add	t2,sp,63
	la  t0, 0x80
 7e8:	08000293          	li	t0,128
	c.nop
 7ec:	0001                	nop
 7ee:	0001                	nop

	DEBUG_TICK_MARK
 7f0:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 7f4:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 7f6:	8961                	and	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
 7f8:	12050f63          	beqz	a0,936 <done_usb_message>
	c.xor a0, a1;
 7fc:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
 7fe:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
 800:	0001                	nop
        seqz a0, a0
 802:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
 806:	0606                	sll	a2,a2,0x1
	c.or a2, a0
 808:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
 80a:	157d                	add	a0,a0,-1
	c.or s0, a0
 80c:	8c49                	or	s0,s0,a0
	c.andi s0, 7
 80e:	881d                	and	s0,s0,7
	c.addi s0, -1
 810:	147d                	add	s0,s0,-1
	c.addi s1, -1
 812:	14fd                	add	s1,s1,-1
	c.bnez s1, packet_type_loop
 814:	f4e1                	bnez	s1,7dc <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
 816:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
 81a:	00c67513          	and	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
 81e:	c509                	beqz	a0,828 <data_crc>
	c.li a4, 0x14	
 820:	4751                	li	a4,20
	c.li a3, 0x1e
 822:	46f9                	li	a3,30
 824:	00000013          	.word	0x00000013

00000828 <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
 828:	00c38023          	sb	a2,0(t2)
 82c:	00138393          	.word	0x00138393

00000830 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
 830:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 834:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 836:	8961                	and	a0,a0,24
	c.xor a0, a1;
 838:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
 83a:	c50d                	beqz	a0,864 <handle_one_bit>

0000083c <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
 83c:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
 83e:	a009                	j	840 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
 840:	4419                	li	s0,6
	c.beqz a1, se0_complete
 842:	c9bd                	beqz	a1,8b8 <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
 844:	01f69513          	sll	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
 848:	857d                	sra	a0,a0,0x1f
	c.srli a3,1
 84a:	8285                	srl	a3,a3,0x1
	c.and  a0, a4
 84c:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
 84e:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 850:	8205                	srl	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 852:	14fd                	add	s1,s1,-1
 854:	0074f513          	and	a0,s1,7
 858:	d961                	beqz	a0,828 <data_crc>
	c.nop
 85a:	0001                	nop
	c.nop
 85c:	0001                	nop
	c.nop
 85e:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 860:	f8e1                	bnez	s1,830 <bit_process>
	c.j done_usb_message
 862:	a8d1                	j	936 <done_usb_message>

00000864 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
 864:	147d                	add	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
 866:	0016f513          	and	a0,a3,1
	c.addi a0, -1
 86a:	157d                	add	a0,a0,-1
	c.and a0, a4
 86c:	8d79                	and	a0,a0,a4
	c.srli a3, 1
 86e:	8285                	srl	a3,a3,0x1
	c.xor a3, a0
 870:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 872:	8205                	srl	a2,a2,0x1
	ori a2, a2, 0x80
 874:	08066613          	or	a2,a2,128
	c.beqz s0, handle_bit_stuff;
 878:	c811                	beqz	s0,88c <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 87a:	14fd                	add	s1,s1,-1
 87c:	0074f513          	and	a0,s1,7
 880:	d545                	beqz	a0,828 <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
 882:	0001                	nop
	c.nop
 884:	0001                	nop
	c.nop
 886:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 888:	f4c5                	bnez	s1,830 <bit_process>
	c.j done_usb_message
 88a:	a075                	j	936 <done_usb_message>

0000088c <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
 88c:	14fd                	add	s1,s1,-1
 88e:	0074f513          	and	a0,s1,7
 892:	e509                	bnez	a0,89c <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
 894:	00c38023          	sb	a2,0(t2)
 898:	00138393          	.word	0x00138393

0000089c <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
 89c:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 8a0:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 8a2:	8961                	and	a0,a0,24
	c.beqz a0, se0_complete
 8a4:	c911                	beqz	a0,8b8 <se0_complete>
	c.xor a0, a1;
 8a6:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
 8a8:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
 8aa:	c551                	beqz	a0,936 <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
 8ac:	4419                	li	s0,6

        c.nop;
 8ae:	0001                	nop
	nx6p3delay( 2, a0 )
 8b0:	450d                	li	a0,3
 8b2:	157d                	add	a0,a0,-1
 8b4:	fd7d                	bnez	a0,8b2 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
 8b6:	fcad                	bnez	s1,830 <bit_process>

000008b8 <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
 8b8:	0074f513          	and	a0,s1,7
	c.bnez a0, done_usb_message
 8bc:	ed2d                	bnez	a0,936 <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
 8be:	03f10593          	add	a1,sp,63
 8c2:	2188                	.short	0x2188
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
 8c4:	0585                	add	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
 8c6:	00000097          	auipc	ra,0x0
 8ca:	07008093          	add	ra,ra,112 # 936 <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
 8ce:	fb550793          	add	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
 8d2:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
 8d4:	1ffff717          	auipc	a4,0x1ffff
 8d8:	74c70713          	add	a4,a4,1868 # 20000020 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
 8dc:	c7c9                	beqz	a5,966 <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
 8de:	ea85                	bnez	a3,90e <crc_for_tokens_would_be_bad_maybe_data>

000008e0 <may_be_a_token>:
 8e0:	2192                	.short	0x2192
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
 8e2:	07f67513          	and	a0,a2,127
	c.srli a2, 7
 8e6:	821d                	srl	a2,a2,0x7
	c.andi a2, 0xf    // endp
 8e8:	8a3d                	and	a2,a2,15
	li s0, ENDPOINTS
 8ea:	4409                	li	s0,2
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
 8ec:	04867563          	bgeu	a2,s0,936 <done_usb_message>
	c.beqz a0,  yes_check_tokens
 8f0:	c501                	beqz	a0,8f8 <yes_check_tokens>
 8f2:	2340                	.short	0x2340
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
 8f4:	04a41163          	bne	s0,a0,936 <done_usb_message>

000008f8 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
 8f8:	fc478793          	add	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
 8fc:	cfc1                	beqz	a5,994 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
 8fe:	17c5                	add	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
 900:	00079463          	bnez	a5,908 <yes_check_tokens+0x10>
 904:	c4fff06f          	j	552 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
 908:	1789                	add	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
 90a:	cbb5                	beqz	a5,97e <usb_pid_handle_setup>

	c.j done_usb_message_in
 90c:	a02d                	j	936 <done_usb_message>

0000090e <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
 90e:	642d                	lui	s0,0xb
 910:	0405                	add	s0,s0,1 # b001 <rv003usb.c.4b30943f+0x8464>
	c.sub a3, s0
 912:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
 914:	e28d                	bnez	a3,936 <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
 916:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
 91a:	0685                	add	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
 91c:	f8878793          	add	a5,a5,-120
	c.li a2, 0
 920:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
 922:	00079463          	bnez	a5,92a <crc_for_tokens_would_be_bad_maybe_data+0x1c>
 926:	d23ff06f          	j	648 <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
 92a:	17c5                	add	a5,a5,-15
	c.li a2, 1
 92c:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
 92e:	00079463          	bnez	a5,936 <done_usb_message>
 932:	d17ff06f          	j	648 <usb_pid_handle_data>

00000936 <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
 936:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
 938:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
 93a:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
 93c:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
 93e:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
 940:	50d2                	lw	ra,52(sp)

00000942 <ret_from_se0>:

ret_from_se0:
	lw	s1, 28(sp)
 942:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
 944:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
 946:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
 948:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
 94a:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
 94c:	4592                	lw	a1,4(sp)

0000094e <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
 94e:	a009                	j	950 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
 950:	400107b7          	lui	a5,0x40010
 954:	41478793          	add	a5,a5,1044 # 40010414 <__global_pointer$+0x2000fc14>
	li a0, (1<<USB_PIN_DM)
 958:	4541                	li	a0,16
	sw a0, 0(a5)
 95a:	c388                	sw	a0,0(a5)

	// Restore stack.
	lw	a0, 0(sp)
 95c:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
 95e:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
 960:	6161                	add	sp,sp,80
	mret
 962:	30200073          	mret

00000966 <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
 966:	4310                	lw	a2,0(a4)
	c.slli a2, 5
 968:	0616                	sll	a2,a2,0x5
	c.add a2, a4
 96a:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
 96c:	0671                	add	a2,a2,28 # 8000001c <__global_pointer$+0x5ffff81c>

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
 96e:	4248                	lw	a0,4(a2)
	c.li a1, 1
 970:	4585                	li	a1,1
	c.xor a0, a1
 972:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
 974:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
 976:	4208                	lw	a0,0(a2)
	c.addi a0, 1
 978:	0505                	add	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
 97a:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
 97c:	bf6d                	j	936 <done_usb_message>

0000097e <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
 97e:	c310                	sw	a2,0(a4)
	c.li a1, 1
 980:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
 982:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
 984:	0616                	sll	a2,a2,0x5
	c.add a2, a4
 986:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
 988:	d20c                	sw	a1,32(a2)
	c.li a1, 0
 98a:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
 98c:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
 98e:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
 990:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
 992:	b755                	j	936 <done_usb_message>

00000994 <usb_pid_handle_out>:
 994:	a310                	.short	0xa310
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
 996:	b745                	j	936 <done_usb_message>

00000998 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
 998:	e000f537          	lui	a0,0xe000f
 99c:	0521                	add	a0,a0,8 # e000f008 <__global_pointer$+0xc000e808>
	la a4, rv003usb_internal_data
 99e:	1ffff717          	auipc	a4,0x1ffff
 9a2:	68270713          	add	a4,a4,1666 # 20000020 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
 9a6:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
 9a8:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
 9aa:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
 9ac:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
 9ae:	cb50                	sw	a2,20(a4)

	li a1, 48000
 9b0:	65b1                	lui	a1,0xc
 9b2:	b8058593          	add	a1,a1,-1152 # bb80 <rv003usb.c.4b30943f+0x8fe3>
	c.sub a2, a1
 9b6:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
 9b8:	6785                	lui	a5,0x1
 9ba:	fa078793          	add	a5,a5,-96 # fa0 <_data_lma+0x354>
	bge a2, a5, ret_from_se0
 9be:	f8f652e3          	bge	a2,a5,942 <ret_from_se0>
	li a5, -4000
 9c2:	77fd                	lui	a5,0xfffff
 9c4:	06078793          	add	a5,a5,96 # fffff060 <__global_pointer$+0xdfffe860>
	blt a2, a5, ret_from_se0
 9c8:	f6f64de3          	blt	a2,a5,942 <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
 9cc:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
 9ce:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
 9d0:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
 9d2:	d9a5                	beqz	a1,942 <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
 9d4:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
 9d8:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
 9da:	00355613          	srl	a2,a0,0x3
	andi a2, a2, 0b11111
 9de:	8a7d                	and	a2,a2,31
	li a5, 0xffffff07  
 9e0:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
 9e4:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
 9e6:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
 9ea:	4095d613          	sra	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
 9ee:	0641                	add	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
 9f0:	060e                	sll	a2,a2,0x3
	or a0, a0, a2
 9f2:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
 9f4:	c308                	sw	a0,0(a4)

	j ret_from_se0
 9f6:	b7b1                	j	942 <ret_from_se0>

000009f8 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
 9f8:	86aa                	mv	a3,a0
	la a0, always0
 9fa:	00000517          	auipc	a0,0x0
 9fe:	13a50513          	add	a0,a0,314 # b34 <always0>
	li a1, 2
 a02:	4589                	li	a1,2
	c.mv a2, a1
 a04:	862e                	mv	a2,a1

00000a06 <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
 a06:	1141                	add	sp,sp,-16
	sw	s0, 0(sp)
 a08:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
 a0a:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
 a0c:	400117b7          	lui	a5,0x40011
 a10:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
 a14:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
 a16:	fff014b7          	lui	s1,0xfff01
 a1a:	14fd                	add	s1,s1,-1 # fff00fff <__global_pointer$+0xdff007ff>
	and a4, s1, a4
 a1c:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
 a1e:	000224b7          	lui	s1,0x22
	or a4, s1, a4
 a22:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
 a24:	001004b7          	lui	s1,0x100
 a28:	04a1                	add	s1,s1,8 # 100008 <rv003usb.c.4b30943f+0xfd46b>
	c.sw s1, BSHR_OFFSET(a5)
 a2a:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
 a2c:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
 a2e:	00180337          	lui	t1,0x180
 a32:	0361                	add	t1,t1,24 # 180018 <rv003usb.c.4b30943f+0x17d47b>

	SAVE_DEBUG_MARKER( 8 )
 a34:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
 a36:	069e                	sll	a3,a3,0x7
	ori s0, a3, 0x40  
 a38:	0406e413          	or	s0,a3,64

	li t0, 0x0000
 a3c:	4281                	li	t0,0
	c.bnez a2, done_poly_check
 a3e:	e609                	bnez	a2,a48 <done_poly_check>
	li t0, 0xa001
 a40:	62a9                	lui	t0,0xa
 a42:	0285                	add	t0,t0,1 # a001 <rv003usb.c.4b30943f+0x7464>
	li a2, 0xffff
 a44:	6641                	lui	a2,0x10
 a46:	167d                	add	a2,a2,-1 # ffff <rv003usb.c.4b30943f+0xd462>

00000a48 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
 a48:	058e                	sll	a1,a1,0x3
	mv t2, a1
 a4a:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
 a4c:	40013237          	lui	tp,0x40013
 a50:	c5820213          	add	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>

	c.li a4, 6 // reset bit stuffing.
 a54:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
 a56:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
 a58:	a011                	j	a5c <pre_and_tok_send_inner_loop>
 a5a:	0001                	nop

00000a5c <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 a5c:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
 a5e:	8005                	srl	s0,s0,0x1
	c.andi a3, 1
 a60:	8a85                	and	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
 a62:	177d                	add	a4,a4,-1 # 40020fff <__global_pointer$+0x200207ff>
	c.bnez a3, pre_and_tok_send_one_bit
 a64:	e681                	bnez	a3,a6c <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 a66:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 a6a:	4719                	li	a4,6

00000a6c <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
 a6c:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
 a6e:	15fd                	add	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
 a70:	c591                	beqz	a1,a7c <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
 a72:	468d                	li	a3,3
 a74:	16fd                	add	a3,a3,-1
 a76:	fefd                	bnez	a3,a74 <pre_and_tok_send_one_bit+0x8>
 a78:	0001                	nop
	c.j pre_and_tok_send_inner_loop
 a7a:	b7cd                	j	a5c <pre_and_tok_send_inner_loop>

00000a7c <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
 a7c:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
 a7e:	c5ad                	beqz	a1,ae8 <no_really_done_sending_data>
	c.addi a1, -1
 a80:	15fd                	add	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
 a82:	00029463          	bnez	t0,a8a <done_poly_check2>
	li a2, 0xffff
 a86:	6641                	lui	a2,0x10
 a88:	167d                	add	a2,a2,-1 # ffff <rv003usb.c.4b30943f+0xd462>

00000a8a <done_poly_check2>:
 a8a:	0001                	nop

00000a8c <load_next_byte>:
 a8c:	2100                	.short	0x2100
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
 a8e:	0505                	add	a0,a0,1

00000a90 <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 a90:	86a2                	mv	a3,s0
	c.andi a3, 1
 a92:	8a85                	and	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
 a94:	ce81                	beqz	a3,aac <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
 a96:	8005                	srl	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
 a98:	00167693          	and	a3,a2,1
	c.addi a3, -1
 a9c:	16fd                	add	a3,a3,-1
	and a3, a3, t0
 a9e:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
 aa2:	8205                	srl	a2,a2,0x1
	c.xor a2, a3
 aa4:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
 aa6:	177d                	add	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
 aa8:	cf25                	beqz	a4,b20 <insert_stuffed_bit>
	c.j cont_after_jump
 aaa:	a829                	j	ac4 <cont_after_jump>

00000aac <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
 aac:	8005                	srl	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
 aae:	01f61693          	sll	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
 ab2:	86fd                	sra	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 ab4:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
 ab8:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
 aba:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
 abc:	8205                	srl	a2,a2,0x1
	and a3,a3,t0
 abe:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
 ac2:	8e35                	xor	a2,a2,a3

00000ac4 <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
 ac4:	c981                	beqz	a1,ad4 <done_sending_data>
	andi a3, a1, 7
 ac6:	0075f693          	and	a3,a1,7
	c.addi a1, -1
 aca:	15fd                	add	a1,a1,-1
	c.beqz a3, load_next_byte
 acc:	d2e1                	beqz	a3,a8c <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
 ace:	a009                	j	ad0 <cont_after_jump+0xc>
	c.j send_inner_loop
 ad0:	b7c1                	j	a90 <send_inner_loop>
 ad2:	0001                	nop

00000ad4 <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
 ad4:	00028a63          	beqz	t0,ae8 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
 ad8:	0082d293          	srl	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
 adc:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
 ade:	fa0289e3          	beqz	t0,a90 <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
 ae2:	fff64413          	not	s0,a2
	c.j send_inner_loop
 ae6:	b76d                	j	a90 <send_inner_loop>

00000ae8 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
 ae8:	468d                	li	a3,3
 aea:	16fd                	add	a3,a3,-1
 aec:	fefd                	bnez	a3,aea <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
 aee:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
 af2:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
 af4:	46a1                	li	a3,8
 af6:	16fd                	add	a3,a3,-1
 af8:	fefd                	bnez	a3,af6 <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
 afa:	000804b7          	lui	s1,0x80
 afe:	04c1                	add	s1,s1,16 # 80010 <rv003usb.c.4b30943f+0x7d473>
	c.sw s1, BSHR_OFFSET(a5)
 b00:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
 b02:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
 b04:	fffcd6b7          	lui	a3,0xfffcd
 b08:	16fd                	add	a3,a3,-1 # fffccfff <__global_pointer$+0xdffcc7ff>
	and s1, a3, s1
 b0a:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
 b0c:	000446b7          	lui	a3,0x44
	or s1, a3, s1
 b10:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
 b12:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
 b14:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
 b16:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
 b18:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
 b1a:	0141                	add	sp,sp,16
	ret
 b1c:	8082                	ret
 b1e:	0001                	nop

00000b20 <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
 b20:	4691                	li	a3,4
 b22:	16fd                	add	a3,a3,-1 # 43fff <rv003usb.c.4b30943f+0x41462>
 b24:	fefd                	bnez	a3,b22 <insert_stuffed_bit+0x2>
	xor s1, s1, t1
 b26:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 b2a:	4719                	li	a4,6
	c.nop
 b2c:	0001                	nop
	c.nop
 b2e:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
 b30:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
 b32:	bf49                	j	ac4 <cont_after_jump>

00000b34 <always0>:
 b34:	00000000          	.word	0x00000000

00000b38 <string3>:
 b38:	00300308 00300030 00000000              ..0.0.0.....

00000b44 <string2>:
 b44:	00500310 006b0069 004b006f 00790065     ..P.i.k.o.K.e.y.
 b54:	00000000                                ....

00000b58 <string1>:
 b58:	00500312 006f0072 0079006b 00650062     ..P.r.o.k.y.b.e.
 b68:	00000072                                r...

00000b6c <string0>:
 b6c:	04090304                                ....

00000b70 <keyboard_hid_desc>:
 b70:	06090105 017501a1 07050895 e729e019     ......u.......).
 b80:	01250015 01950281 03810875 01750595     ..%.....u.....u.
 b90:	01190805 02910529 03750195 06950391     ....).....u.....
 ba0:	00150875 0705a725 a7290019 00c00081     u...%.....).....

00000bb0 <config_descriptor>:
 bb0:	00220209 80000101 00040964 01030100     ..".....d.......
 bc0:	21090001 01000110 07003f22 08038105     ...!...."?......
 bd0:	00000a00                                ....

00000bd4 <device_descriptor>:
 bd4:	01100112 08000000 13b916d0 02010002     ................
 be4:	00000103                                ....

00000be8 <descriptor_list>:
 be8:	00000100 00000bd4 00000012 00000200     ................
 bf8:	00000bb0 00000022 00002200 00000b70     ...."...."..p...
 c08:	0000003f 00000300 00000b6c 00000004     ?.......l.......
 c18:	04090301 00000b58 00000012 04090302     ....X...........
 c28:	00000b44 00000010 04090303 00000b38     D...........8...
 c38:	00000008                                ....

00000c3c <i2k>:
 c3c:	201f1e27 24232221 05042625 09080706     '.. !"#$%&......
